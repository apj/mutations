#! /bin/sh
baseDIR=$MUTATIONS_HOME
ssjJAR=$baseDIR"/lib/ssj.jar"
coltJAR=$baseDIR"/lib/colt.jar"
asmJAR=$baseDIR"/lib/asm-all-3.1.jar"
flanJAR=$baseDIR"/lib/flanagan.jar"
JSONsimpJAR=$baseDIR"/lib/json_simple-1.1.jar"
zPath=$baseDIR"/lib/Mutations.jar"
cPath=$ssjJAR:$coltJAR:$asmJAR:$flanJAR:$JSONsimpJAR:$zPath
minMem="-Xms1224m"
maxMem="-Xmx1224m"
pf="asm/asm.versions"

# Arguments passed to Java program are fileName, reportNumber ($1), ShowHeader ($2) and Show Processing ($3)
# ShowReportHeader, ShowProcesing should be Y or N depending on requirement 
echo "Started Processing Data Set A at `date`" 1>&2

if [ "$1" = "acegi" ]; then pf="acegi/acegi.versions"
elif [ "$1" = "activebpel" ]; then pf="activebpel/activebpel.versions" 
elif [ "$1" = "activemq" ]; then pf="activemq/activemq.versions"
elif [ "$1" = "ant" ]; then pf="ant/ant.versions"
elif [ "$1" = "asm" ]; then pf="asm/asm.versions"
elif [ "$1" = "axis" ]; then pf="axis/axis.versions"
elif [ "$1" = "azureus" ]; then pf="azureus/azureus.versions"
elif [ "$1" = "bfopdf" ]; then pf="bfopdf/bfopdf.versions"
elif [ "$1" = "bforeport" ]; then pf="bforeport/bforeport.versions"
elif [ "$1" = "cassandra" ]; then pf="cassandra/cassandra.versions"
elif [ "$1" = "castor" ]; then pf="castor/castor.versions"
elif [ "$1" = "checkstyle" ]; then pf="checkstyle/checkstyle.versions"
elif [ "$1" = "cocoon" ]; then pf="cocoon/cocoon.versions"
elif [ "$1" = "columba" ]; then pf="columba/columba.versions"
elif [ "$1" = "compass" ]; then pf="compass/compass.versions" 
elif [ "$1" = "datavision" ]; then pf="datavision/datavision.versions"
elif [ "$1" = "eclipse" ]; then pf="eclipse/eclipse.versions"
elif [ "$1" = "findbugs" ]; then pf="findbugs/findbugs.versions"
elif [ "$1" = "flow4j" ]; then pf="flow4j/flow4j.versions" 
elif [ "$1" = "freemarker" ]; then pf="freemarker/freemarker.versions"
elif [ "$1" = "groovy" ]; then pf="groovy/groovy.versions"
elif [ "$1" = "hibernate" ]; then pf="hibernate/hibernate.versions"
elif [ "$1" = "hsqldb" ]; then pf="hsqldb/hsqldb.versions"
elif [ "$1" = "ibatis" ]; then pf="ibatis/ibatis.versions"
elif [ "$1" = "itext" ]; then pf="itext/itext.versions"
elif [ "$1" = "jabref" ]; then pf="jabref/jabref.versions"
elif [ "$1" = "jameleon" ]; then pf="jameleon/jameleon.versions"
elif [ "$1" = "jasperreports" ]; then pf="jasperreports/jasperreports.versions"
elif [ "$1" = "javolution" ]; then pf="javolution/javolution.versions"
elif [ "$1" = "jchempaint" ]; then pf="jchempaint/jchempaint.versions" 
elif [ "$1" = "jena" ]; then pf="jena/jena.versions"
elif [ "$1" = "jetty" ]; then pf="jetty/jetty.versions"
elif [ "$1" = "jfreechart" ]; then pf="jfreechart/jfreechart.versions"
elif [ "$1" = "jgroups" ]; then pf="jgroups/jgroups.versions"
elif [ "$1" = "jmeter" ]; then pf="jmeter/jmeter.versions"
elif [ "$1" = "jruby" ]; then pf="jruby/jruby.versions"
elif [ "$1" = "jung" ]; then pf="jung/jung.versions"
elif [ "$1" = "kolmafia" ]; then pf="kolmafia/kolmafia.versions"
elif [ "$1" = "log4j" ]; then pf="log4j/log4j.versions"
elif [ "$1" = "lucene" ]; then pf="lucene/lucene.versions"		
elif [ "$1" = "maven" ]; then pf="maven/maven.versions"
elif [ "$1" = "pmd" ]; then pf="pmd/pmd.versions"
elif [ "$1" = "proguard" ]; then pf="proguard/proguard.versions"  
elif [ "$1" = "quartz" ]; then pf="quartz/quartz.versions"
elif [ "$1" = "rssowl" ]; then pf="rssowl/rssowl.versions"
elif [ "$1" = "saxon" ]; then pf="saxon/saxon.versions"
elif [ "$1" = "soapui" ]; then pf="soapui/soapui.versions"
elif [ "$1" = "spring" ]; then pf="spring/spring.versions"
elif [ "$1" = "stripes" ]; then pf="stripes/stripes.versions"
elif [ "$1" = "struts" ]; then pf="struts/struts.versions"
elif [ "$1" = "tapestry" ]; then pf="tapestry/tapestry.versions"
elif [ "$1" = "velocity" ]; then pf="velocity/velocity.versions"
elif [ "$1" = "voldemort" ]; then pf="voldemort/voldemort.versions"
elif [ "$1" = "webwork" ]; then pf="webwork/webwork.versions"
elif [ "$1" = "wicket" ]; then pf="wicket/wicket.versions"  		
elif [ "$1" = "xalan" ]; then pf="xalan/xalan.versions"
elif [ "$1" = "xerces" ]; then pf="xerces/xerces.versions"
elif [ "$1" = "xwork" ]; then pf="xwork/xwork.versions"
fi

java $minMem $maxMem -classpath $cPath mutations.MetricExtractor $pf $2 $3 $4 $5 $6 $7 $8 $9

# echo "Finished Processing Data Set A at `date`" 1>&2